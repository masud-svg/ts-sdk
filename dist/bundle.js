/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["basyx-ts-sdk"] = factory();
	else
		root["basyx-ts-sdk"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/isomorphic-fetch/fetch-npm-browserify.js":
/*!***************************************************************!*\
  !*** ./node_modules/isomorphic-fetch/fetch-npm-browserify.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\nmodule.exports = self.fetch.bind(self);\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/isomorphic-fetch/fetch-npm-browserify.js?");

/***/ }),

/***/ "./node_modules/querystring/decode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/decode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/querystring/decode.js?");

/***/ }),

/***/ "./node_modules/querystring/encode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/encode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/querystring/encode.js?");

/***/ }),

/***/ "./node_modules/querystring/index.js":
/*!*******************************************!*\
  !*** ./node_modules/querystring/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring/encode.js\");\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/querystring/index.js?");

/***/ }),

/***/ "./src/api.ts":
/*!********************!*\
  !*** ./src/api.ts ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/// <reference path=\"./custom.d.ts\" />\r\n// tslint:disable\r\n/**\r\n * BaSyx Registry HTTP REST-API\r\n * The full OpenAPI 3.0.1 specification of the BaSyx Registry HTTP REST-API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: constantin.ziesche@bosch.com\r\n *\r\n * NOTE: This file is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the file manually.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\r\nvar isomorphicFetch = __webpack_require__(/*! isomorphic-fetch */ \"./node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\r\nexports.BASE_PATH = \"http://{authority}/\".replace(/\\/+$/, \"\");\r\n/**\r\n *\r\n * @export\r\n */\r\nexports.COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\"\r\n};\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nvar BaseAPI = /** @class */ (function () {\r\n    function BaseAPI(configuration, basePath, fetch) {\r\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\r\n        if (fetch === void 0) { fetch = isomorphicFetch; }\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n    return BaseAPI;\r\n}());\r\nexports.BaseAPI = BaseAPI;\r\n;\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nvar RequiredError = /** @class */ (function (_super) {\r\n    __extends(RequiredError, _super);\r\n    function RequiredError(field, msg) {\r\n        var _this = _super.call(this, msg) || this;\r\n        _this.field = field;\r\n        _this.name = \"RequiredError\";\r\n        return _this;\r\n    }\r\n    return RequiredError;\r\n}(Error));\r\nexports.RequiredError = RequiredError;\r\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./src/api.ts?");

/***/ }),

/***/ "./src/asset-administration-shell-registry.ts":
/*!****************************************************!*\
  !*** ./src/asset-administration-shell-registry.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\nexports.AssetAdministrationShellRegistryApi = exports.AssetAdministrationShellRegistryApiFactory = exports.AssetAdministrationShellRegistryApiFp = exports.AssetAdministrationShellRegistryApiFetchParamCreator = exports.ValueObject = exports.ModelTypes = exports.Message = exports.LevelType = exports.KeyType = exports.KeyElements = exports.AssetKind = void 0;\r\nvar url = __webpack_require__(/*! url */ \"./node_modules/url/url.js\");\r\nvar isomorphicFetch = __webpack_require__(/*! isomorphic-fetch */ \"./node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\r\nvar api_1 = __webpack_require__(/*! ./api */ \"./src/api.ts\");\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar AssetKind;\r\n(function (AssetKind) {\r\n    AssetKind[AssetKind[\"Type\"] = 'Type'] = \"Type\";\r\n    AssetKind[AssetKind[\"Instance\"] = 'Instance'] = \"Instance\";\r\n})(AssetKind = exports.AssetKind || (exports.AssetKind = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar KeyElements;\r\n(function (KeyElements) {\r\n    KeyElements[KeyElements[\"Asset\"] = 'Asset'] = \"Asset\";\r\n    KeyElements[KeyElements[\"AssetAdministrationShell\"] = 'AssetAdministrationShell'] = \"AssetAdministrationShell\";\r\n    KeyElements[KeyElements[\"ConceptDescription\"] = 'ConceptDescription'] = \"ConceptDescription\";\r\n    KeyElements[KeyElements[\"Submodel\"] = 'Submodel'] = \"Submodel\";\r\n    KeyElements[KeyElements[\"AccessPermissionRule\"] = 'AccessPermissionRule'] = \"AccessPermissionRule\";\r\n    KeyElements[KeyElements[\"AnnotatedRelationshipElement\"] = 'AnnotatedRelationshipElement'] = \"AnnotatedRelationshipElement\";\r\n    KeyElements[KeyElements[\"BasicEvent\"] = 'BasicEvent'] = \"BasicEvent\";\r\n    KeyElements[KeyElements[\"Blob\"] = 'Blob'] = \"Blob\";\r\n    KeyElements[KeyElements[\"Capability\"] = 'Capability'] = \"Capability\";\r\n    KeyElements[KeyElements[\"ConceptDictionary\"] = 'ConceptDictionary'] = \"ConceptDictionary\";\r\n    KeyElements[KeyElements[\"DataElement\"] = 'DataElement'] = \"DataElement\";\r\n    KeyElements[KeyElements[\"File\"] = 'File'] = \"File\";\r\n    KeyElements[KeyElements[\"Entity\"] = 'Entity'] = \"Entity\";\r\n    KeyElements[KeyElements[\"Event\"] = 'Event'] = \"Event\";\r\n    KeyElements[KeyElements[\"MultiLanguageProperty\"] = 'MultiLanguageProperty'] = \"MultiLanguageProperty\";\r\n    KeyElements[KeyElements[\"Operation\"] = 'Operation'] = \"Operation\";\r\n    KeyElements[KeyElements[\"Property\"] = 'Property'] = \"Property\";\r\n    KeyElements[KeyElements[\"Range\"] = 'Range'] = \"Range\";\r\n    KeyElements[KeyElements[\"ReferenceElement\"] = 'ReferenceElement'] = \"ReferenceElement\";\r\n    KeyElements[KeyElements[\"RelationshipElement\"] = 'RelationshipElement'] = \"RelationshipElement\";\r\n    KeyElements[KeyElements[\"SubmodelElement\"] = 'SubmodelElement'] = \"SubmodelElement\";\r\n    KeyElements[KeyElements[\"SubmodelElementCollection\"] = 'SubmodelElementCollection'] = \"SubmodelElementCollection\";\r\n    KeyElements[KeyElements[\"View\"] = 'View'] = \"View\";\r\n    KeyElements[KeyElements[\"GlobalReference\"] = 'GlobalReference'] = \"GlobalReference\";\r\n    KeyElements[KeyElements[\"FragmentReference\"] = 'FragmentReference'] = \"FragmentReference\";\r\n})(KeyElements = exports.KeyElements || (exports.KeyElements = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar KeyType;\r\n(function (KeyType) {\r\n    KeyType[KeyType[\"Custom\"] = 'Custom'] = \"Custom\";\r\n    KeyType[KeyType[\"IRDI\"] = 'IRDI'] = \"IRDI\";\r\n    KeyType[KeyType[\"IRI\"] = 'IRI'] = \"IRI\";\r\n    KeyType[KeyType[\"IdShort\"] = 'IdShort'] = \"IdShort\";\r\n    KeyType[KeyType[\"FragmentId\"] = 'FragmentId'] = \"FragmentId\";\r\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar LevelType;\r\n(function (LevelType) {\r\n    LevelType[LevelType[\"Min\"] = 'Min'] = \"Min\";\r\n    LevelType[LevelType[\"Max\"] = 'Max'] = \"Max\";\r\n    LevelType[LevelType[\"Nom\"] = 'Nom'] = \"Nom\";\r\n    LevelType[LevelType[\"Typ\"] = 'Typ'] = \"Typ\";\r\n})(LevelType = exports.LevelType || (exports.LevelType = {}));\r\n/**\r\n * @export\r\n * @namespace Message\r\n */\r\nvar Message;\r\n(function (Message) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var MessageTypeEnum;\r\n    (function (MessageTypeEnum) {\r\n        MessageTypeEnum[MessageTypeEnum[\"Unspecified\"] = 'Unspecified'] = \"Unspecified\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Debug\"] = 'Debug'] = \"Debug\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Information\"] = 'Information'] = \"Information\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Warning\"] = 'Warning'] = \"Warning\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Error\"] = 'Error'] = \"Error\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Fatal\"] = 'Fatal'] = \"Fatal\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Exception\"] = 'Exception'] = \"Exception\";\r\n    })(MessageTypeEnum = Message.MessageTypeEnum || (Message.MessageTypeEnum = {}));\r\n})(Message = exports.Message || (exports.Message = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar ModelTypes;\r\n(function (ModelTypes) {\r\n    ModelTypes[ModelTypes[\"Asset\"] = 'Asset'] = \"Asset\";\r\n    ModelTypes[ModelTypes[\"AssetAdministrationShell\"] = 'AssetAdministrationShell'] = \"AssetAdministrationShell\";\r\n    ModelTypes[ModelTypes[\"ConceptDescription\"] = 'ConceptDescription'] = \"ConceptDescription\";\r\n    ModelTypes[ModelTypes[\"Submodel\"] = 'Submodel'] = \"Submodel\";\r\n    ModelTypes[ModelTypes[\"AccessPermissionRule\"] = 'AccessPermissionRule'] = \"AccessPermissionRule\";\r\n    ModelTypes[ModelTypes[\"AnnotatedRelationshipElement\"] = 'AnnotatedRelationshipElement'] = \"AnnotatedRelationshipElement\";\r\n    ModelTypes[ModelTypes[\"BasicEvent\"] = 'BasicEvent'] = \"BasicEvent\";\r\n    ModelTypes[ModelTypes[\"Blob\"] = 'Blob'] = \"Blob\";\r\n    ModelTypes[ModelTypes[\"Capability\"] = 'Capability'] = \"Capability\";\r\n    ModelTypes[ModelTypes[\"ConceptDictionary\"] = 'ConceptDictionary'] = \"ConceptDictionary\";\r\n    ModelTypes[ModelTypes[\"DataElement\"] = 'DataElement'] = \"DataElement\";\r\n    ModelTypes[ModelTypes[\"File\"] = 'File'] = \"File\";\r\n    ModelTypes[ModelTypes[\"Entity\"] = 'Entity'] = \"Entity\";\r\n    ModelTypes[ModelTypes[\"Event\"] = 'Event'] = \"Event\";\r\n    ModelTypes[ModelTypes[\"MultiLanguageProperty\"] = 'MultiLanguageProperty'] = \"MultiLanguageProperty\";\r\n    ModelTypes[ModelTypes[\"Operation\"] = 'Operation'] = \"Operation\";\r\n    ModelTypes[ModelTypes[\"Property\"] = 'Property'] = \"Property\";\r\n    ModelTypes[ModelTypes[\"Range\"] = 'Range'] = \"Range\";\r\n    ModelTypes[ModelTypes[\"ReferenceElement\"] = 'ReferenceElement'] = \"ReferenceElement\";\r\n    ModelTypes[ModelTypes[\"RelationshipElement\"] = 'RelationshipElement'] = \"RelationshipElement\";\r\n    ModelTypes[ModelTypes[\"SubmodelElement\"] = 'SubmodelElement'] = \"SubmodelElement\";\r\n    ModelTypes[ModelTypes[\"SubmodelElementCollection\"] = 'SubmodelElementCollection'] = \"SubmodelElementCollection\";\r\n    ModelTypes[ModelTypes[\"View\"] = 'View'] = \"View\";\r\n    ModelTypes[ModelTypes[\"GlobalReference\"] = 'GlobalReference'] = \"GlobalReference\";\r\n    ModelTypes[ModelTypes[\"FragmentReference\"] = 'FragmentReference'] = \"FragmentReference\";\r\n    ModelTypes[ModelTypes[\"Constraint\"] = 'Constraint'] = \"Constraint\";\r\n    ModelTypes[ModelTypes[\"Formula\"] = 'Formula'] = \"Formula\";\r\n    ModelTypes[ModelTypes[\"Qualifier\"] = 'Qualifier'] = \"Qualifier\";\r\n})(ModelTypes = exports.ModelTypes || (exports.ModelTypes = {}));\r\n/**\r\n * @export\r\n * @namespace ValueObject\r\n */\r\nvar ValueObject;\r\n(function (ValueObject) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var ValueTypeEnum;\r\n    (function (ValueTypeEnum) {\r\n        ValueTypeEnum[ValueTypeEnum[\"AnyUri\"] = 'anyUri'] = \"AnyUri\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Base64Binary\"] = 'base64Binary'] = \"Base64Binary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Date\"] = 'date'] = \"Date\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTime\"] = 'dateTime'] = \"DateTime\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTimeStamp\"] = 'dateTimeStamp'] = \"DateTimeStamp\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Decimal\"] = 'decimal'] = \"Decimal\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Integer\"] = 'integer'] = \"Integer\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Long\"] = 'long'] = \"Long\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Int\"] = 'int'] = \"Int\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Short\"] = 'short'] = \"Short\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Byte\"] = 'byte'] = \"Byte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonNegativeInteger\"] = 'nonNegativeInteger'] = \"NonNegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"PositiveInteger\"] = 'positiveInteger'] = \"PositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedLong\"] = 'unsignedLong'] = \"UnsignedLong\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedInt\"] = 'unsignedInt'] = \"UnsignedInt\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedShort\"] = 'unsignedShort'] = \"UnsignedShort\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedByte\"] = 'unsignedByte'] = \"UnsignedByte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonPositiveInteger\"] = 'nonPositiveInteger'] = \"NonPositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NegativeInteger\"] = 'negativeInteger'] = \"NegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Double\"] = 'double'] = \"Double\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Duration\"] = 'duration'] = \"Duration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DayTimeDuration\"] = 'dayTimeDuration'] = \"DayTimeDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"YearMonthDuration\"] = 'yearMonthDuration'] = \"YearMonthDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Float\"] = 'float'] = \"Float\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GDay\"] = 'gDay'] = \"GDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonth\"] = 'gMonth'] = \"GMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonthDay\"] = 'gMonthDay'] = \"GMonthDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYear\"] = 'gYear'] = \"GYear\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYearMonth\"] = 'gYearMonth'] = \"GYearMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"HexBinary\"] = 'hexBinary'] = \"HexBinary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NOTATION\"] = 'NOTATION'] = \"NOTATION\";\r\n        ValueTypeEnum[ValueTypeEnum[\"QName\"] = 'QName'] = \"QName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"String\"] = 'string'] = \"String\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NormalizedString\"] = 'normalizedString'] = \"NormalizedString\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Token\"] = 'token'] = \"Token\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Language\"] = 'language'] = \"Language\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Name\"] = 'Name'] = \"Name\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NCName\"] = 'NCName'] = \"NCName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ENTITY\"] = 'ENTITY'] = \"ENTITY\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ID\"] = 'ID'] = \"ID\";\r\n        ValueTypeEnum[ValueTypeEnum[\"IDREF\"] = 'IDREF'] = \"IDREF\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NMTOKEN\"] = 'NMTOKEN'] = \"NMTOKEN\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Time\"] = 'time'] = \"Time\";\r\n    })(ValueTypeEnum = ValueObject.ValueTypeEnum || (ValueObject.ValueTypeEnum = {}));\r\n})(ValueObject = exports.ValueObject || (exports.ValueObject = {}));\r\n/**\r\n * AssetAdministrationShellRegistryApi - fetch parameter creator\r\n * @export\r\n */\r\nvar AssetAdministrationShellRegistryApiFetchParamCreator = function (configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Unregisters the Submodel from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling deleteSubmodelDescriptorFromAssetAdministrationShell.');\r\n            }\r\n            // verify required parameter 'submodelId' is not null or undefined\r\n            if (submodelId === null || submodelId === undefined) {\r\n                throw new api_1.RequiredError('submodelId', 'Required parameter submodelId was null or undefined when calling deleteSubmodelDescriptorFromAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}/submodels/{submodelId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)))\r\n                .replace(\"{\".concat(\"submodelId\", \"}\"), encodeURIComponent(String(submodelId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all registered Asset Administration Shells within system (e.g. Station, Line, Plant, Area, etc.) defined by the Registry\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllAssetAdministrationShellDescriptors: function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/api/v1/registry\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel registrations from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllSubmodelDescriptorsFromAssetAdministrationShell: function (aasId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling getAllSubmodelDescriptorsFromAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}/submodels\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Asset Administration Shell registration\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetAdministrationShellDescriptor: function (aasId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling getAssetAdministrationShellDescriptor.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the Submodel registration from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling getSubmodelDescriptorFromAssetAdministrationShell.');\r\n            }\r\n            // verify required parameter 'submodelId' is not null or undefined\r\n            if (submodelId === null || submodelId === undefined) {\r\n                throw new api_1.RequiredError('submodelId', 'Required parameter submodelId was null or undefined when calling getSubmodelDescriptorFromAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}/submodels/{submodelId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)))\r\n                .replace(\"{\".concat(\"submodelId\", \"}\"), encodeURIComponent(String(submodelId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Asset Administration Shell registration at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {AssetAdministrationShellDescriptor} [body] The Asset Administration Shell Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerAssetAdministrationShell: function (aasId, body, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling registerAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = ( true) || 0;\r\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Submodel registration at a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {SubmodelDescriptor} [body] The Submodel Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerSubmodelAtAssetAdministrationShell: function (aasId, submodelId, body, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling registerSubmodelAtAssetAdministrationShell.');\r\n            }\r\n            // verify required parameter 'submodelId' is not null or undefined\r\n            if (submodelId === null || submodelId === undefined) {\r\n                throw new api_1.RequiredError('submodelId', 'Required parameter submodelId was null or undefined when calling registerSubmodelAtAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}/submodels/{submodelId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)))\r\n                .replace(\"{\".concat(\"submodelId\", \"}\"), encodeURIComponent(String(submodelId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = ( true) || 0;\r\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Deletes the Asset Administration Shell registration from the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        unregisterAssetAdministrationShell: function (aasId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'aasId' is not null or undefined\r\n            if (aasId === null || aasId === undefined) {\r\n                throw new api_1.RequiredError('aasId', 'Required parameter aasId was null or undefined when calling unregisterAssetAdministrationShell.');\r\n            }\r\n            var localVarPath = \"/api/v1/registry/{aasId}\"\r\n                .replace(\"{\".concat(\"aasId\", \"}\"), encodeURIComponent(String(aasId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        }\r\n    };\r\n};\r\nexports.AssetAdministrationShellRegistryApiFetchParamCreator = AssetAdministrationShellRegistryApiFetchParamCreator;\r\n/**\r\n * AssetAdministrationShellRegistryApi - functional programming interface\r\n * @export\r\n */\r\nvar AssetAdministrationShellRegistryApiFp = function (configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Unregisters the Submodel from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).deleteSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all registered Asset Administration Shells within system (e.g. Station, Line, Plant, Area, etc.) defined by the Registry\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllAssetAdministrationShellDescriptors: function (options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).getAllAssetAdministrationShellDescriptors(options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel registrations from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllSubmodelDescriptorsFromAssetAdministrationShell: function (aasId, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).getAllSubmodelDescriptorsFromAssetAdministrationShell(aasId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Asset Administration Shell registration\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetAdministrationShellDescriptor: function (aasId, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).getAssetAdministrationShellDescriptor(aasId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the Submodel registration from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).getSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Asset Administration Shell registration at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {AssetAdministrationShellDescriptor} [body] The Asset Administration Shell Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerAssetAdministrationShell: function (aasId, body, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).registerAssetAdministrationShell(aasId, body, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Submodel registration at a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {SubmodelDescriptor} [body] The Submodel Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerSubmodelAtAssetAdministrationShell: function (aasId, submodelId, body, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).registerSubmodelAtAssetAdministrationShell(aasId, submodelId, body, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Deletes the Asset Administration Shell registration from the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        unregisterAssetAdministrationShell: function (aasId, options) {\r\n            var localVarFetchArgs = (0, exports.AssetAdministrationShellRegistryApiFetchParamCreator)(configuration).unregisterAssetAdministrationShell(aasId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    };\r\n};\r\nexports.AssetAdministrationShellRegistryApiFp = AssetAdministrationShellRegistryApiFp;\r\n/**\r\n * AssetAdministrationShellRegistryApi - factory interface\r\n * @export\r\n */\r\nvar AssetAdministrationShellRegistryApiFactory = function (configuration, fetch, basePath) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Unregisters the Submodel from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).deleteSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all registered Asset Administration Shells within system (e.g. Station, Line, Plant, Area, etc.) defined by the Registry\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllAssetAdministrationShellDescriptors: function (options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).getAllAssetAdministrationShellDescriptors(options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel registrations from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAllSubmodelDescriptorsFromAssetAdministrationShell: function (aasId, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).getAllSubmodelDescriptorsFromAssetAdministrationShell(aasId, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Asset Administration Shell registration\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetAdministrationShellDescriptor: function (aasId, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).getAssetAdministrationShellDescriptor(aasId, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the Submodel registration from a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelDescriptorFromAssetAdministrationShell: function (aasId, submodelId, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).getSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Asset Administration Shell registration at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {AssetAdministrationShellDescriptor} [body] The Asset Administration Shell Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerAssetAdministrationShell: function (aasId, body, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).registerAssetAdministrationShell(aasId, body, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates a new or updates an existing Submodel registration at a specific Asset Administration Shell registered at the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {string} submodelId The Submodel&#x27;s unique id\r\n         * @param {SubmodelDescriptor} [body] The Submodel Descriptor\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        registerSubmodelAtAssetAdministrationShell: function (aasId, submodelId, body, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).registerSubmodelAtAssetAdministrationShell(aasId, submodelId, body, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Deletes the Asset Administration Shell registration from the Registry\r\n         * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        unregisterAssetAdministrationShell: function (aasId, options) {\r\n            return (0, exports.AssetAdministrationShellRegistryApiFp)(configuration).unregisterAssetAdministrationShell(aasId, options)(fetch, basePath);\r\n        }\r\n    };\r\n};\r\nexports.AssetAdministrationShellRegistryApiFactory = AssetAdministrationShellRegistryApiFactory;\r\n/**\r\n * AssetAdministrationShellRegistryApi - object-oriented interface\r\n * @export\r\n * @class AssetAdministrationShellRegistryApi\r\n * @extends {BaseAPI}\r\n */\r\nvar AssetAdministrationShellRegistryApi = /** @class */ (function (_super) {\r\n    __extends(AssetAdministrationShellRegistryApi, _super);\r\n    function AssetAdministrationShellRegistryApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     *\r\n     * @summary Unregisters the Submodel from a specific Asset Administration Shell registered at the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {string} submodelId The Submodel&#x27;s unique id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.deleteSubmodelDescriptorFromAssetAdministrationShell = function (aasId, submodelId, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).deleteSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves all registered Asset Administration Shells within system (e.g. Station, Line, Plant, Area, etc.) defined by the Registry\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.getAllAssetAdministrationShellDescriptors = function (options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).getAllAssetAdministrationShellDescriptors(options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves all Submodel registrations from a specific Asset Administration Shell registered at the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.getAllSubmodelDescriptorsFromAssetAdministrationShell = function (aasId, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).getAllSubmodelDescriptorsFromAssetAdministrationShell(aasId, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves a specific Asset Administration Shell registration\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.getAssetAdministrationShellDescriptor = function (aasId, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).getAssetAdministrationShellDescriptor(aasId, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves the Submodel registration from a specific Asset Administration Shell registered at the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {string} submodelId The Submodel&#x27;s unique id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.getSubmodelDescriptorFromAssetAdministrationShell = function (aasId, submodelId, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).getSubmodelDescriptorFromAssetAdministrationShell(aasId, submodelId, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Creates a new or updates an existing Asset Administration Shell registration at the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {AssetAdministrationShellDescriptor} [body] The Asset Administration Shell Descriptor\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.registerAssetAdministrationShell = function (aasId, body, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).registerAssetAdministrationShell(aasId, body, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Creates a new or updates an existing Submodel registration at a specific Asset Administration Shell registered at the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {string} submodelId The Submodel&#x27;s unique id\r\n     * @param {SubmodelDescriptor} [body] The Submodel Descriptor\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.registerSubmodelAtAssetAdministrationShell = function (aasId, submodelId, body, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).registerSubmodelAtAssetAdministrationShell(aasId, submodelId, body, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Deletes the Asset Administration Shell registration from the Registry\r\n     * @param {string} aasId The Asset Administration Shell&#x27;s unique id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetAdministrationShellRegistryApi\r\n     */\r\n    AssetAdministrationShellRegistryApi.prototype.unregisterAssetAdministrationShell = function (aasId, options) {\r\n        return (0, exports.AssetAdministrationShellRegistryApiFp)(this.configuration).unregisterAssetAdministrationShell(aasId, options)(this.fetch, this.basePath);\r\n    };\r\n    return AssetAdministrationShellRegistryApi;\r\n}(api_1.BaseAPI));\r\nexports.AssetAdministrationShellRegistryApi = AssetAdministrationShellRegistryApi;\r\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./src/asset-administration-shell-registry.ts?");

/***/ }),

/***/ "./src/configuration.ts":
/*!******************************!*\
  !*** ./src/configuration.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n// tslint:disable\r\n/**\r\n * BaSyx Registry HTTP REST-API\r\n * The full OpenAPI 3.0.1 specification of the BaSyx Registry HTTP REST-API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: constantin.ziesche@bosch.com\r\n *\r\n * NOTE: This file is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the file manually.\r\n */\r\nexports.__esModule = true;\r\nexports.Configuration = void 0;\r\nvar Configuration = /** @class */ (function () {\r\n    function Configuration(param) {\r\n        if (param === void 0) { param = {}; }\r\n        this.apiKey = param.apiKey;\r\n        this.username = param.username;\r\n        this.password = param.password;\r\n        this.accessToken = param.accessToken;\r\n        this.basePath = param.basePath;\r\n    }\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./src/configuration.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nexports.__esModule = true;\r\n// tslint:disable\r\n/**\r\n * BaSyx Registry HTTP REST-API\r\n * The full OpenAPI 3.0.1 specification of the BaSyx Registry HTTP REST-API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: constantin.ziesche@bosch.com\r\n *\r\n * NOTE: This file is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the file manually.\r\n */\r\n__exportStar(__webpack_require__(/*! ./configuration */ \"./src/configuration.ts\"), exports);\r\n__exportStar(__webpack_require__(/*! ./api */ \"./src/api.ts\"), exports);\r\n__exportStar(__webpack_require__(/*! ./asset-administration-shell-registry */ \"./src/asset-administration-shell-registry.ts\"), exports);\r\n__exportStar(__webpack_require__(/*! ./submodel */ \"./src/submodel.ts\"), exports);\r\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./src/index.ts?");

/***/ }),

/***/ "./src/submodel.ts":
/*!*************************!*\
  !*** ./src/submodel.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\nexports.SubmodelApi = exports.SubmodelApiFactory = exports.SubmodelApiFp = exports.SubmodelApiFetchParamCreator = exports.Range = exports.Property = exports.ModelingKind = exports.InvocationResponse = exports.EntityType = void 0;\r\nvar url = __webpack_require__(/*! url */ \"./node_modules/url/url.js\");\r\nvar isomorphicFetch = __webpack_require__(/*! isomorphic-fetch */ \"./node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\r\nvar api_1 = __webpack_require__(/*! ./api */ \"./src/api.ts\");\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar EntityType;\r\n(function (EntityType) {\r\n    EntityType[EntityType[\"CoManagedEntity\"] = 'CoManagedEntity'] = \"CoManagedEntity\";\r\n    EntityType[EntityType[\"SelfManagedEntity\"] = 'SelfManagedEntity'] = \"SelfManagedEntity\";\r\n})(EntityType = exports.EntityType || (exports.EntityType = {}));\r\n/**\r\n * @export\r\n * @namespace InvocationResponse\r\n */\r\nvar InvocationResponse;\r\n(function (InvocationResponse) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var ExecutionStateEnum;\r\n    (function (ExecutionStateEnum) {\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Initiated\"] = 'Initiated'] = \"Initiated\";\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Running\"] = 'Running'] = \"Running\";\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Completed\"] = 'Completed'] = \"Completed\";\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Canceled\"] = 'Canceled'] = \"Canceled\";\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Failed\"] = 'Failed'] = \"Failed\";\r\n        ExecutionStateEnum[ExecutionStateEnum[\"Timeout\"] = 'Timeout'] = \"Timeout\";\r\n    })(ExecutionStateEnum = InvocationResponse.ExecutionStateEnum || (InvocationResponse.ExecutionStateEnum = {}));\r\n})(InvocationResponse = exports.InvocationResponse || (exports.InvocationResponse = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar KeyElements;\r\n(function (KeyElements) {\r\n    KeyElements[KeyElements[\"Asset\"] = 'Asset'] = \"Asset\";\r\n    KeyElements[KeyElements[\"AssetAdministrationShell\"] = 'AssetAdministrationShell'] = \"AssetAdministrationShell\";\r\n    KeyElements[KeyElements[\"ConceptDescription\"] = 'ConceptDescription'] = \"ConceptDescription\";\r\n    KeyElements[KeyElements[\"Submodel\"] = 'Submodel'] = \"Submodel\";\r\n    KeyElements[KeyElements[\"AccessPermissionRule\"] = 'AccessPermissionRule'] = \"AccessPermissionRule\";\r\n    KeyElements[KeyElements[\"AnnotatedRelationshipElement\"] = 'AnnotatedRelationshipElement'] = \"AnnotatedRelationshipElement\";\r\n    KeyElements[KeyElements[\"BasicEvent\"] = 'BasicEvent'] = \"BasicEvent\";\r\n    KeyElements[KeyElements[\"Blob\"] = 'Blob'] = \"Blob\";\r\n    KeyElements[KeyElements[\"Capability\"] = 'Capability'] = \"Capability\";\r\n    KeyElements[KeyElements[\"ConceptDictionary\"] = 'ConceptDictionary'] = \"ConceptDictionary\";\r\n    KeyElements[KeyElements[\"DataElement\"] = 'DataElement'] = \"DataElement\";\r\n    KeyElements[KeyElements[\"File\"] = 'File'] = \"File\";\r\n    KeyElements[KeyElements[\"Entity\"] = 'Entity'] = \"Entity\";\r\n    KeyElements[KeyElements[\"Event\"] = 'Event'] = \"Event\";\r\n    KeyElements[KeyElements[\"MultiLanguageProperty\"] = 'MultiLanguageProperty'] = \"MultiLanguageProperty\";\r\n    KeyElements[KeyElements[\"Operation\"] = 'Operation'] = \"Operation\";\r\n    KeyElements[KeyElements[\"Property\"] = 'Property'] = \"Property\";\r\n    KeyElements[KeyElements[\"Range\"] = 'Range'] = \"Range\";\r\n    KeyElements[KeyElements[\"ReferenceElement\"] = 'ReferenceElement'] = \"ReferenceElement\";\r\n    KeyElements[KeyElements[\"RelationshipElement\"] = 'RelationshipElement'] = \"RelationshipElement\";\r\n    KeyElements[KeyElements[\"SubmodelElement\"] = 'SubmodelElement'] = \"SubmodelElement\";\r\n    KeyElements[KeyElements[\"SubmodelElementCollection\"] = 'SubmodelElementCollection'] = \"SubmodelElementCollection\";\r\n    KeyElements[KeyElements[\"View\"] = 'View'] = \"View\";\r\n    KeyElements[KeyElements[\"GlobalReference\"] = 'GlobalReference'] = \"GlobalReference\";\r\n    KeyElements[KeyElements[\"FragmentReference\"] = 'FragmentReference'] = \"FragmentReference\";\r\n})(KeyElements || (KeyElements = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar KeyType;\r\n(function (KeyType) {\r\n    KeyType[KeyType[\"Custom\"] = 'Custom'] = \"Custom\";\r\n    KeyType[KeyType[\"IRDI\"] = 'IRDI'] = \"IRDI\";\r\n    KeyType[KeyType[\"IRI\"] = 'IRI'] = \"IRI\";\r\n    KeyType[KeyType[\"IdShort\"] = 'IdShort'] = \"IdShort\";\r\n    KeyType[KeyType[\"FragmentId\"] = 'FragmentId'] = \"FragmentId\";\r\n})(KeyType || (KeyType = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar LevelType;\r\n(function (LevelType) {\r\n    LevelType[LevelType[\"Min\"] = 'Min'] = \"Min\";\r\n    LevelType[LevelType[\"Max\"] = 'Max'] = \"Max\";\r\n    LevelType[LevelType[\"Nom\"] = 'Nom'] = \"Nom\";\r\n    LevelType[LevelType[\"Typ\"] = 'Typ'] = \"Typ\";\r\n})(LevelType || (LevelType = {}));\r\n/**\r\n * @export\r\n * @namespace Message\r\n */\r\nvar Message;\r\n(function (Message) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var MessageTypeEnum;\r\n    (function (MessageTypeEnum) {\r\n        MessageTypeEnum[MessageTypeEnum[\"Unspecified\"] = 'Unspecified'] = \"Unspecified\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Debug\"] = 'Debug'] = \"Debug\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Information\"] = 'Information'] = \"Information\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Warning\"] = 'Warning'] = \"Warning\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Error\"] = 'Error'] = \"Error\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Fatal\"] = 'Fatal'] = \"Fatal\";\r\n        MessageTypeEnum[MessageTypeEnum[\"Exception\"] = 'Exception'] = \"Exception\";\r\n    })(MessageTypeEnum = Message.MessageTypeEnum || (Message.MessageTypeEnum = {}));\r\n})(Message || (Message = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar ModelTypes;\r\n(function (ModelTypes) {\r\n    ModelTypes[ModelTypes[\"Asset\"] = 'Asset'] = \"Asset\";\r\n    ModelTypes[ModelTypes[\"AssetAdministrationShell\"] = 'AssetAdministrationShell'] = \"AssetAdministrationShell\";\r\n    ModelTypes[ModelTypes[\"ConceptDescription\"] = 'ConceptDescription'] = \"ConceptDescription\";\r\n    ModelTypes[ModelTypes[\"Submodel\"] = 'Submodel'] = \"Submodel\";\r\n    ModelTypes[ModelTypes[\"AccessPermissionRule\"] = 'AccessPermissionRule'] = \"AccessPermissionRule\";\r\n    ModelTypes[ModelTypes[\"AnnotatedRelationshipElement\"] = 'AnnotatedRelationshipElement'] = \"AnnotatedRelationshipElement\";\r\n    ModelTypes[ModelTypes[\"BasicEvent\"] = 'BasicEvent'] = \"BasicEvent\";\r\n    ModelTypes[ModelTypes[\"Blob\"] = 'Blob'] = \"Blob\";\r\n    ModelTypes[ModelTypes[\"Capability\"] = 'Capability'] = \"Capability\";\r\n    ModelTypes[ModelTypes[\"ConceptDictionary\"] = 'ConceptDictionary'] = \"ConceptDictionary\";\r\n    ModelTypes[ModelTypes[\"DataElement\"] = 'DataElement'] = \"DataElement\";\r\n    ModelTypes[ModelTypes[\"File\"] = 'File'] = \"File\";\r\n    ModelTypes[ModelTypes[\"Entity\"] = 'Entity'] = \"Entity\";\r\n    ModelTypes[ModelTypes[\"Event\"] = 'Event'] = \"Event\";\r\n    ModelTypes[ModelTypes[\"MultiLanguageProperty\"] = 'MultiLanguageProperty'] = \"MultiLanguageProperty\";\r\n    ModelTypes[ModelTypes[\"Operation\"] = 'Operation'] = \"Operation\";\r\n    ModelTypes[ModelTypes[\"Property\"] = 'Property'] = \"Property\";\r\n    ModelTypes[ModelTypes[\"Range\"] = 'Range'] = \"Range\";\r\n    ModelTypes[ModelTypes[\"ReferenceElement\"] = 'ReferenceElement'] = \"ReferenceElement\";\r\n    ModelTypes[ModelTypes[\"RelationshipElement\"] = 'RelationshipElement'] = \"RelationshipElement\";\r\n    ModelTypes[ModelTypes[\"SubmodelElement\"] = 'SubmodelElement'] = \"SubmodelElement\";\r\n    ModelTypes[ModelTypes[\"SubmodelElementCollection\"] = 'SubmodelElementCollection'] = \"SubmodelElementCollection\";\r\n    ModelTypes[ModelTypes[\"View\"] = 'View'] = \"View\";\r\n    ModelTypes[ModelTypes[\"GlobalReference\"] = 'GlobalReference'] = \"GlobalReference\";\r\n    ModelTypes[ModelTypes[\"FragmentReference\"] = 'FragmentReference'] = \"FragmentReference\";\r\n    ModelTypes[ModelTypes[\"Constraint\"] = 'Constraint'] = \"Constraint\";\r\n    ModelTypes[ModelTypes[\"Formula\"] = 'Formula'] = \"Formula\";\r\n    ModelTypes[ModelTypes[\"Qualifier\"] = 'Qualifier'] = \"Qualifier\";\r\n})(ModelTypes || (ModelTypes = {}));\r\n/**\r\n *\r\n * @export\r\n * @enum {string}\r\n */\r\nvar ModelingKind;\r\n(function (ModelingKind) {\r\n    ModelingKind[ModelingKind[\"Template\"] = 'Template'] = \"Template\";\r\n    ModelingKind[ModelingKind[\"Instance\"] = 'Instance'] = \"Instance\";\r\n})(ModelingKind = exports.ModelingKind || (exports.ModelingKind = {}));\r\n/**\r\n * @export\r\n * @namespace Property\r\n */\r\nvar Property;\r\n(function (Property) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var ValueTypeEnum;\r\n    (function (ValueTypeEnum) {\r\n        ValueTypeEnum[ValueTypeEnum[\"AnyUri\"] = 'anyUri'] = \"AnyUri\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Base64Binary\"] = 'base64Binary'] = \"Base64Binary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Date\"] = 'date'] = \"Date\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTime\"] = 'dateTime'] = \"DateTime\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTimeStamp\"] = 'dateTimeStamp'] = \"DateTimeStamp\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Decimal\"] = 'decimal'] = \"Decimal\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Integer\"] = 'integer'] = \"Integer\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Long\"] = 'long'] = \"Long\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Int\"] = 'int'] = \"Int\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Short\"] = 'short'] = \"Short\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Byte\"] = 'byte'] = \"Byte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonNegativeInteger\"] = 'nonNegativeInteger'] = \"NonNegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"PositiveInteger\"] = 'positiveInteger'] = \"PositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedLong\"] = 'unsignedLong'] = \"UnsignedLong\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedInt\"] = 'unsignedInt'] = \"UnsignedInt\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedShort\"] = 'unsignedShort'] = \"UnsignedShort\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedByte\"] = 'unsignedByte'] = \"UnsignedByte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonPositiveInteger\"] = 'nonPositiveInteger'] = \"NonPositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NegativeInteger\"] = 'negativeInteger'] = \"NegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Double\"] = 'double'] = \"Double\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Duration\"] = 'duration'] = \"Duration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DayTimeDuration\"] = 'dayTimeDuration'] = \"DayTimeDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"YearMonthDuration\"] = 'yearMonthDuration'] = \"YearMonthDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Float\"] = 'float'] = \"Float\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GDay\"] = 'gDay'] = \"GDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonth\"] = 'gMonth'] = \"GMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonthDay\"] = 'gMonthDay'] = \"GMonthDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYear\"] = 'gYear'] = \"GYear\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYearMonth\"] = 'gYearMonth'] = \"GYearMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"HexBinary\"] = 'hexBinary'] = \"HexBinary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NOTATION\"] = 'NOTATION'] = \"NOTATION\";\r\n        ValueTypeEnum[ValueTypeEnum[\"QName\"] = 'QName'] = \"QName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"String\"] = 'string'] = \"String\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NormalizedString\"] = 'normalizedString'] = \"NormalizedString\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Token\"] = 'token'] = \"Token\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Language\"] = 'language'] = \"Language\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Name\"] = 'Name'] = \"Name\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NCName\"] = 'NCName'] = \"NCName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ENTITY\"] = 'ENTITY'] = \"ENTITY\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ID\"] = 'ID'] = \"ID\";\r\n        ValueTypeEnum[ValueTypeEnum[\"IDREF\"] = 'IDREF'] = \"IDREF\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NMTOKEN\"] = 'NMTOKEN'] = \"NMTOKEN\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Time\"] = 'time'] = \"Time\";\r\n        ValueTypeEnum[ValueTypeEnum[\"MultiLanguageProperty\"] = 'string'] = \"MultiLanguageProperty\";\r\n    })(ValueTypeEnum = Property.ValueTypeEnum || (Property.ValueTypeEnum = {}));\r\n})(Property = exports.Property || (exports.Property = {}));\r\n/**\r\n * @export\r\n * @namespace Range\r\n */\r\nvar Range;\r\n(function (Range) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var ValueTypeEnum;\r\n    (function (ValueTypeEnum) {\r\n        ValueTypeEnum[ValueTypeEnum[\"AnyUri\"] = 'anyUri'] = \"AnyUri\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Base64Binary\"] = 'base64Binary'] = \"Base64Binary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Date\"] = 'date'] = \"Date\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTime\"] = 'dateTime'] = \"DateTime\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTimeStamp\"] = 'dateTimeStamp'] = \"DateTimeStamp\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Decimal\"] = 'decimal'] = \"Decimal\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Integer\"] = 'integer'] = \"Integer\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Long\"] = 'long'] = \"Long\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Int\"] = 'int'] = \"Int\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Short\"] = 'short'] = \"Short\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Byte\"] = 'byte'] = \"Byte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonNegativeInteger\"] = 'nonNegativeInteger'] = \"NonNegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"PositiveInteger\"] = 'positiveInteger'] = \"PositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedLong\"] = 'unsignedLong'] = \"UnsignedLong\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedInt\"] = 'unsignedInt'] = \"UnsignedInt\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedShort\"] = 'unsignedShort'] = \"UnsignedShort\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedByte\"] = 'unsignedByte'] = \"UnsignedByte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonPositiveInteger\"] = 'nonPositiveInteger'] = \"NonPositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NegativeInteger\"] = 'negativeInteger'] = \"NegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Double\"] = 'double'] = \"Double\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Duration\"] = 'duration'] = \"Duration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DayTimeDuration\"] = 'dayTimeDuration'] = \"DayTimeDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"YearMonthDuration\"] = 'yearMonthDuration'] = \"YearMonthDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Float\"] = 'float'] = \"Float\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GDay\"] = 'gDay'] = \"GDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonth\"] = 'gMonth'] = \"GMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonthDay\"] = 'gMonthDay'] = \"GMonthDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYear\"] = 'gYear'] = \"GYear\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYearMonth\"] = 'gYearMonth'] = \"GYearMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"HexBinary\"] = 'hexBinary'] = \"HexBinary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NOTATION\"] = 'NOTATION'] = \"NOTATION\";\r\n        ValueTypeEnum[ValueTypeEnum[\"QName\"] = 'QName'] = \"QName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"String\"] = 'string'] = \"String\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NormalizedString\"] = 'normalizedString'] = \"NormalizedString\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Token\"] = 'token'] = \"Token\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Language\"] = 'language'] = \"Language\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Name\"] = 'Name'] = \"Name\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NCName\"] = 'NCName'] = \"NCName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ENTITY\"] = 'ENTITY'] = \"ENTITY\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ID\"] = 'ID'] = \"ID\";\r\n        ValueTypeEnum[ValueTypeEnum[\"IDREF\"] = 'IDREF'] = \"IDREF\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NMTOKEN\"] = 'NMTOKEN'] = \"NMTOKEN\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Time\"] = 'time'] = \"Time\";\r\n    })(ValueTypeEnum = Range.ValueTypeEnum || (Range.ValueTypeEnum = {}));\r\n})(Range = exports.Range || (exports.Range = {}));\r\n/**\r\n * @export\r\n * @namespace ValueObject\r\n */\r\nvar ValueObject;\r\n(function (ValueObject) {\r\n    /**\r\n     * @export\r\n     * @enum {string}\r\n     */\r\n    var ValueTypeEnum;\r\n    (function (ValueTypeEnum) {\r\n        ValueTypeEnum[ValueTypeEnum[\"AnyUri\"] = 'anyUri'] = \"AnyUri\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Base64Binary\"] = 'base64Binary'] = \"Base64Binary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Date\"] = 'date'] = \"Date\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTime\"] = 'dateTime'] = \"DateTime\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DateTimeStamp\"] = 'dateTimeStamp'] = \"DateTimeStamp\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Decimal\"] = 'decimal'] = \"Decimal\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Integer\"] = 'integer'] = \"Integer\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Long\"] = 'long'] = \"Long\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Int\"] = 'int'] = \"Int\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Short\"] = 'short'] = \"Short\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Byte\"] = 'byte'] = \"Byte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonNegativeInteger\"] = 'nonNegativeInteger'] = \"NonNegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"PositiveInteger\"] = 'positiveInteger'] = \"PositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedLong\"] = 'unsignedLong'] = \"UnsignedLong\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedInt\"] = 'unsignedInt'] = \"UnsignedInt\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedShort\"] = 'unsignedShort'] = \"UnsignedShort\";\r\n        ValueTypeEnum[ValueTypeEnum[\"UnsignedByte\"] = 'unsignedByte'] = \"UnsignedByte\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NonPositiveInteger\"] = 'nonPositiveInteger'] = \"NonPositiveInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NegativeInteger\"] = 'negativeInteger'] = \"NegativeInteger\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Double\"] = 'double'] = \"Double\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Duration\"] = 'duration'] = \"Duration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"DayTimeDuration\"] = 'dayTimeDuration'] = \"DayTimeDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"YearMonthDuration\"] = 'yearMonthDuration'] = \"YearMonthDuration\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Float\"] = 'float'] = \"Float\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GDay\"] = 'gDay'] = \"GDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonth\"] = 'gMonth'] = \"GMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GMonthDay\"] = 'gMonthDay'] = \"GMonthDay\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYear\"] = 'gYear'] = \"GYear\";\r\n        ValueTypeEnum[ValueTypeEnum[\"GYearMonth\"] = 'gYearMonth'] = \"GYearMonth\";\r\n        ValueTypeEnum[ValueTypeEnum[\"HexBinary\"] = 'hexBinary'] = \"HexBinary\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NOTATION\"] = 'NOTATION'] = \"NOTATION\";\r\n        ValueTypeEnum[ValueTypeEnum[\"QName\"] = 'QName'] = \"QName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"String\"] = 'string'] = \"String\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NormalizedString\"] = 'normalizedString'] = \"NormalizedString\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Token\"] = 'token'] = \"Token\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Language\"] = 'language'] = \"Language\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Name\"] = 'Name'] = \"Name\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NCName\"] = 'NCName'] = \"NCName\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ENTITY\"] = 'ENTITY'] = \"ENTITY\";\r\n        ValueTypeEnum[ValueTypeEnum[\"ID\"] = 'ID'] = \"ID\";\r\n        ValueTypeEnum[ValueTypeEnum[\"IDREF\"] = 'IDREF'] = \"IDREF\";\r\n        ValueTypeEnum[ValueTypeEnum[\"NMTOKEN\"] = 'NMTOKEN'] = \"NMTOKEN\";\r\n        ValueTypeEnum[ValueTypeEnum[\"Time\"] = 'time'] = \"Time\";\r\n    })(ValueTypeEnum = ValueObject.ValueTypeEnum || (ValueObject.ValueTypeEnum = {}));\r\n})(ValueObject || (ValueObject = {}));\r\n/**\r\n * SubmodelApi - fetch parameter creator\r\n * @export\r\n */\r\nvar SubmodelApiFetchParamCreator = function (configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Deletes a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'seIdShortPath' is not null or undefined\r\n            if (seIdShortPath === null || seIdShortPath === undefined) {\r\n                throw new api_1.RequiredError('seIdShortPath', 'Required parameter seIdShortPath was null or undefined when calling deleteSubmodelElementByIdShort.');\r\n            }\r\n            var localVarPath = \"/submodel/submodelElements/{seIdShortPath}\"\r\n                .replace(\"{\".concat(\"seIdShortPath\", \"}\"), encodeURIComponent(String(seIdShortPath)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the result of an asynchronously started operation\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {string} requestId The request id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getInvocationResultByIdShort: function (idShortPathToOperation, requestId, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'idShortPathToOperation' is not null or undefined\r\n            if (idShortPathToOperation === null || idShortPathToOperation === undefined) {\r\n                throw new api_1.RequiredError('idShortPathToOperation', 'Required parameter idShortPathToOperation was null or undefined when calling getInvocationResultByIdShort.');\r\n            }\r\n            // verify required parameter 'requestId' is not null or undefined\r\n            if (requestId === null || requestId === undefined) {\r\n                throw new api_1.RequiredError('requestId', 'Required parameter requestId was null or undefined when calling getInvocationResultByIdShort.');\r\n            }\r\n            var localVarPath = \"/submodel/submodelElements/{idShortPathToOperation}/invocationList/{requestId}\"\r\n                .replace(\"{\".concat(\"idShortPathToOperation\", \"}\"), encodeURIComponent(String(idShortPathToOperation)))\r\n                .replace(\"{\".concat(\"requestId\", \"}\"), encodeURIComponent(String(requestId)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the entire Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodel: function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/submodel\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'seIdShortPath' is not null or undefined\r\n            if (seIdShortPath === null || seIdShortPath === undefined) {\r\n                throw new api_1.RequiredError('seIdShortPath', 'Required parameter seIdShortPath was null or undefined when calling getSubmodelElementByIdShort.');\r\n            }\r\n            // const localVarPath = `/submodel/submodelElements/{seIdShortPath}`\r\n            // .replace(`{${\"seIdShortPath\"}}`, encodeURIComponent(String(seIdShortPath)));\r\n            // uri encodes each idShort\r\n            //const seIdShortPathUriEncoded = seIdShortPath.split('/').map(element => {\r\n            //   return encodeURIComponent(element);\r\n            // }).reduce((accu, elem) => {\r\n            // return accu + elem  + '/';\r\n            // }, \"\")\r\n            var localVarPath = \"/submodel/submodelElements/{seIdShortPath}\"\r\n                .replace(\"{\".concat(\"seIdShortPath\", \"}\"), seIdShortPath);\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the value of a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementValueByIdShort: function (seIdShortPath, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'seIdShortPath' is not null or undefined\r\n            if (seIdShortPath === null || seIdShortPath === undefined) {\r\n                throw new api_1.RequiredError('seIdShortPath', 'Required parameter seIdShortPath was null or undefined when calling getSubmodelElementValueByIdShort.');\r\n            }\r\n            // const localVarPath = `/submodel/submodelElements/{seIdShortPath}/value`\r\n            //     .replace(`{${\"seIdShortPath\"}}`, encodeURIComponent(String(seIdShortPath)));\r\n            // uri encodes each idShort\r\n            //const seIdShortPathUriEncoded = seIdShortPath.split('/').map(element => {\r\n            //   return encodeURIComponent(element);\r\n            // }).reduce((accu, elem) => {\r\n            // return accu + elem  + '/';\r\n            // }, \"\")\r\n            var localVarPath = \"/submodel/submodelElements/{seIdShortPath}/value\"\r\n                .replace(\"{\".concat(\"seIdShortPath\", \"}\"), seIdShortPath); // allow nested elements paths to be set\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel-Elements from the Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElements: function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/submodel/submodelElements\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelValues: function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/submodel/values\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Invokes a specific operation from the Submodel synchronously or asynchronously\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {InvocationRequest} [body] The parameterized request object for the invocation\r\n         * @param {boolean} [async] Determines whether the execution of the operation is asynchronous (true) or not (false)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        invokeOperationByIdShort: function (idShortPathToOperation, body, async, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'idShortPathToOperation' is not null or undefined\r\n            if (idShortPathToOperation === null || idShortPathToOperation === undefined) {\r\n                throw new api_1.RequiredError('idShortPathToOperation', 'Required parameter idShortPathToOperation was null or undefined when calling invokeOperationByIdShort.');\r\n            }\r\n            var localVarPath = \"/submodel/submodelElements/{idShortPathToOperation}/invoke\"\r\n                .replace(\"{\".concat(\"idShortPathToOperation\", \"}\"), encodeURIComponent(String(idShortPathToOperation)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (async !== undefined) {\r\n                localVarQueryParameter['async'] = async;\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = ( true) || 0;\r\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates or updates a Submodel-Element at the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {SubmodelElement} [body] The Submodel-Element object\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElement: function (seIdShortPath, body, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'seIdShortPath' is not null or undefined\r\n            if (seIdShortPath === null || seIdShortPath === undefined) {\r\n                throw new api_1.RequiredError('seIdShortPath', 'Required parameter seIdShortPath was null or undefined when calling putSubmodelElement.');\r\n            }\r\n            var localVarPath = \"/submodel/submodelElements/{seIdShortPath}\"\r\n                .replace(\"{\".concat(\"seIdShortPath\", \"}\"), encodeURIComponent(String(seIdShortPath)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = ( true) || 0;\r\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates the Submodel-Element's value\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {any} [body] The new value\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElementValueByIdShort: function (seIdShortPath, body, options) {\r\n            if (options === void 0) { options = {}; }\r\n            // verify required parameter 'seIdShortPath' is not null or undefined\r\n            if (seIdShortPath === null || seIdShortPath === undefined) {\r\n                throw new api_1.RequiredError('seIdShortPath', 'Required parameter seIdShortPath was null or undefined when calling putSubmodelElementValueByIdShort.');\r\n            }\r\n            var localVarPath = \"/submodel/submodelElements/{seIdShortPath}/value\"\r\n                .replace(\"{\".concat(\"seIdShortPath\", \"}\"), encodeURIComponent(String(seIdShortPath)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = ( true) || 0;\r\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions\r\n            };\r\n        }\r\n    };\r\n};\r\nexports.SubmodelApiFetchParamCreator = SubmodelApiFetchParamCreator;\r\n/**\r\n * SubmodelApi - functional programming interface\r\n * @export\r\n */\r\nvar SubmodelApiFp = function (configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Deletes a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).deleteSubmodelElementByIdShort(seIdShortPath, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the result of an asynchronously started operation\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {string} requestId The request id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getInvocationResultByIdShort: function (idShortPathToOperation, requestId, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getInvocationResultByIdShort(idShortPathToOperation, requestId, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the entire Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodel: function (options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getSubmodel(options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getSubmodelElementByIdShort(seIdShortPath, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the value of a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementValueByIdShort: function (seIdShortPath, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getSubmodelElementValueByIdShort(seIdShortPath, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel-Elements from the Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElements: function (options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getSubmodelElements(options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelValues: function (options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).getSubmodelValues(options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Invokes a specific operation from the Submodel synchronously or asynchronously\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {InvocationRequest} [body] The parameterized request object for the invocation\r\n         * @param {boolean} [async] Determines whether the execution of the operation is asynchronous (true) or not (false)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        invokeOperationByIdShort: function (idShortPathToOperation, body, async, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).invokeOperationByIdShort(idShortPathToOperation, body, async, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates or updates a Submodel-Element at the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {SubmodelElement} [body] The Submodel-Element object\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElement: function (seIdShortPath, body, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).putSubmodelElement(seIdShortPath, body, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response.json();\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates the Submodel-Element's value\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {any} [body] The new value\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElementValueByIdShort: function (seIdShortPath, body, options) {\r\n            var localVarFetchArgs = (0, exports.SubmodelApiFetchParamCreator)(configuration).putSubmodelElementValueByIdShort(seIdShortPath, body, options);\r\n            return function (fetch, basePath) {\r\n                if (fetch === void 0) { fetch = isomorphicFetch; }\r\n                if (basePath === void 0) { basePath = api_1.BASE_PATH; }\r\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\r\n                    if (response.status >= 200 && response.status < 300) {\r\n                        return response;\r\n                    }\r\n                    else {\r\n                        throw response;\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    };\r\n};\r\nexports.SubmodelApiFp = SubmodelApiFp;\r\n/**\r\n * SubmodelApi - factory interface\r\n * @export\r\n */\r\nvar SubmodelApiFactory = function (configuration, fetch, basePath) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Deletes a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        deleteSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).deleteSubmodelElementByIdShort(seIdShortPath, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the result of an asynchronously started operation\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {string} requestId The request id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getInvocationResultByIdShort: function (idShortPathToOperation, requestId, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getInvocationResultByIdShort(idShortPathToOperation, requestId, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the entire Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodel: function (options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getSubmodel(options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementByIdShort: function (seIdShortPath, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getSubmodelElementByIdShort(seIdShortPath, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the value of a specific Submodel-Element from the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElementValueByIdShort: function (seIdShortPath, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getSubmodelElementValueByIdShort(seIdShortPath, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves all Submodel-Elements from the Submodel\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelElements: function (options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getSubmodelElements(options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSubmodelValues: function (options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).getSubmodelValues(options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Invokes a specific operation from the Submodel synchronously or asynchronously\r\n         * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n         * @param {InvocationRequest} [body] The parameterized request object for the invocation\r\n         * @param {boolean} [async] Determines whether the execution of the operation is asynchronous (true) or not (false)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        invokeOperationByIdShort: function (idShortPathToOperation, body, async, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).invokeOperationByIdShort(idShortPathToOperation, body, async, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Creates or updates a Submodel-Element at the Submodel\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {SubmodelElement} [body] The Submodel-Element object\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElement: function (seIdShortPath, body, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).putSubmodelElement(seIdShortPath, body, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates the Submodel-Element's value\r\n         * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n         * @param {any} [body] The new value\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        putSubmodelElementValueByIdShort: function (seIdShortPath, body, options) {\r\n            return (0, exports.SubmodelApiFp)(configuration).putSubmodelElementValueByIdShort(seIdShortPath, body, options)(fetch, basePath);\r\n        }\r\n    };\r\n};\r\nexports.SubmodelApiFactory = SubmodelApiFactory;\r\n/**\r\n * SubmodelApi - object-oriented interface\r\n * @export\r\n * @class SubmodelApi\r\n * @extends {BaseAPI}\r\n */\r\nvar SubmodelApi = /** @class */ (function (_super) {\r\n    __extends(SubmodelApi, _super);\r\n    function SubmodelApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     *\r\n     * @summary Deletes a specific Submodel-Element from the Submodel\r\n     * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.deleteSubmodelElementByIdShort = function (seIdShortPath, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).deleteSubmodelElementByIdShort(seIdShortPath, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves the result of an asynchronously started operation\r\n     * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n     * @param {string} requestId The request id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getInvocationResultByIdShort = function (idShortPathToOperation, requestId, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getInvocationResultByIdShort(idShortPathToOperation, requestId, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves the entire Submodel\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getSubmodel = function (options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getSubmodel(options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves a specific Submodel-Element from the Submodel\r\n     * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getSubmodelElementByIdShort = function (seIdShortPath, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getSubmodelElementByIdShort(seIdShortPath, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves the value of a specific Submodel-Element from the Submodel\r\n     * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getSubmodelElementValueByIdShort = function (seIdShortPath, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getSubmodelElementValueByIdShort(seIdShortPath, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves all Submodel-Elements from the Submodel\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getSubmodelElements = function (options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getSubmodelElements(options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.getSubmodelValues = function (options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).getSubmodelValues(options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Invokes a specific operation from the Submodel synchronously or asynchronously\r\n     * @param {string} idShortPathToOperation The IdShort path to the Operation\r\n     * @param {InvocationRequest} [body] The parameterized request object for the invocation\r\n     * @param {boolean} [async] Determines whether the execution of the operation is asynchronous (true) or not (false)\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.invokeOperationByIdShort = function (idShortPathToOperation, body, async, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).invokeOperationByIdShort(idShortPathToOperation, body, async, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Creates or updates a Submodel-Element at the Submodel\r\n     * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n     * @param {SubmodelElement} [body] The Submodel-Element object\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.putSubmodelElement = function (seIdShortPath, body, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).putSubmodelElement(seIdShortPath, body, options)(this.fetch, this.basePath);\r\n    };\r\n    /**\r\n     *\r\n     * @summary Updates the Submodel-Element's value\r\n     * @param {string} seIdShortPath The Submodel-Element&#x27;s IdShort-Path\r\n     * @param {any} [body] The new value\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SubmodelApi\r\n     */\r\n    SubmodelApi.prototype.putSubmodelElementValueByIdShort = function (seIdShortPath, body, options) {\r\n        return (0, exports.SubmodelApiFp)(this.configuration).putSubmodelElementValueByIdShort(seIdShortPath, body, options)(this.fetch, this.basePath);\r\n    };\r\n    return SubmodelApi;\r\n}(api_1.BaseAPI));\r\nexports.SubmodelApi = SubmodelApi;\r\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./src/submodel.ts?");

/***/ }),

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/*!************************************************************!*\
  !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  true && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  true && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(this));\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/url/node_modules/punycode/punycode.js?");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/url/node_modules/punycode/punycode.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/url/url.js?");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/url/util.js?");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMException\": () => (/* binding */ DOMException),\n/* harmony export */   \"Headers\": () => (/* binding */ Headers),\n/* harmony export */   \"Request\": () => (/* binding */ Request),\n/* harmony export */   \"Response\": () => (/* binding */ Response),\n/* harmony export */   \"fetch\": () => (/* binding */ fetch)\n/* harmony export */ });\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n\n\n//# sourceURL=webpack://basyx-ts-sdk/./node_modules/whatwg-fetch/fetch.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});